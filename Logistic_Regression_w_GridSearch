{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Introduction?? Heart Attack Prediction using Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "import scipy.stats as st\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sn\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.mlab as mlab\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>ap_hi</th>\n",
       "      <th>ap_lo</th>\n",
       "      <th>cardio</th>\n",
       "      <th>BMI</th>\n",
       "      <th>gender_1</th>\n",
       "      <th>gender_2</th>\n",
       "      <th>cholesterol_1</th>\n",
       "      <th>...</th>\n",
       "      <th>cholesterol_3</th>\n",
       "      <th>gluc_1</th>\n",
       "      <th>gluc_2</th>\n",
       "      <th>gluc_3</th>\n",
       "      <th>smoke_0</th>\n",
       "      <th>smoke_1</th>\n",
       "      <th>alco_0</th>\n",
       "      <th>alco_1</th>\n",
       "      <th>active_0</th>\n",
       "      <th>active_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>110</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>21.948577</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>140</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>35.329481</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>52.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>130</td>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>23.461065</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>150</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>28.188906</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>100</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>23.238108</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  height  weight  ap_hi  ap_lo  cardio        BMI  gender_1  gender_2  \\\n",
       "0  50.0    66.0   136.0    110     80       0  21.948577         0         1   \n",
       "1  55.0    61.0   187.0    140     90       1  35.329481         1         0   \n",
       "2  52.0    65.0   141.0    130     70       1  23.461065         1         0   \n",
       "3  48.0    67.0   180.0    150    100       1  28.188906         0         1   \n",
       "4  48.0    61.0   123.0    100     60       0  23.238108         1         0   \n",
       "\n",
       "   cholesterol_1  ...  cholesterol_3  gluc_1  gluc_2  gluc_3  smoke_0  \\\n",
       "0              1  ...              0       1       0       0        1   \n",
       "1              0  ...              1       1       0       0        1   \n",
       "2              0  ...              1       1       0       0        1   \n",
       "3              1  ...              0       1       0       0        1   \n",
       "4              1  ...              0       1       0       0        1   \n",
       "\n",
       "   smoke_1  alco_0  alco_1  active_0  active_1  \n",
       "0        0       1       0         0         1  \n",
       "1        0       1       0         0         1  \n",
       "2        0       1       0         1         0  \n",
       "3        0       1       0         0         1  \n",
       "4        0       1       0         1         0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read the CSV\n",
    "heart = pd.read_csv(\"cleaned_cardio.csv\")\n",
    "heart.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age              0\n",
       "height           0\n",
       "weight           0\n",
       "ap_hi            0\n",
       "ap_lo            0\n",
       "cardio           0\n",
       "BMI              0\n",
       "gender_1         0\n",
       "gender_2         0\n",
       "cholesterol_1    0\n",
       "cholesterol_2    0\n",
       "cholesterol_3    0\n",
       "gluc_1           0\n",
       "gluc_2           0\n",
       "gluc_3           0\n",
       "smoke_0          0\n",
       "smoke_1          0\n",
       "alco_0           0\n",
       "alco_1           0\n",
       "active_0         0\n",
       "active_1         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(68606, 20) (68606,)\n"
     ]
    }
   ],
   "source": [
    "# Assign X (data) and y (target)\n",
    "X = heart.drop(\"cardio\", axis=1)\n",
    "y = heart[\"cardio\"]\n",
    "print(X.shape, y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exploratory Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "num must be 1 <= num <= 18, not 19",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-5b47383970f3>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      8\u001b[0m     \u001b[0mfig\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m     \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m \u001b[0mdraw_histograms\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mheart\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mheart\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m6\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m<ipython-input-6-5b47383970f3>\u001b[0m in \u001b[0;36mdraw_histograms\u001b[1;34m(dataframe, features, rows, cols)\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[0mfig\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m20\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m20\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfeature\u001b[0m \u001b[1;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m         \u001b[0max\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfig\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_subplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrows\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcols\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m         \u001b[0mdataframe\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbins\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m20\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mfacecolor\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'midnightblue'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m         \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfeature\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\" Distribution\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'DarkRed'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda\\Anaconda3\\lib\\site-packages\\matplotlib\\figure.py\u001b[0m in \u001b[0;36madd_subplot\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1412\u001b[0m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_axstack\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1413\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1414\u001b[1;33m             \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msubplot_class_factory\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprojection_class\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1415\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1416\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_add_axes_internal\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda\\Anaconda3\\lib\\site-packages\\matplotlib\\axes\\_subplots.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, fig, *args, **kwargs)\u001b[0m\n\u001b[0;32m     57\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mnum\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mnum\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mrows\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mcols\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m                     raise ValueError(\n\u001b[1;32m---> 59\u001b[1;33m                         f\"num must be 1 <= num <= {rows*cols}, not {num}\")\n\u001b[0m\u001b[0;32m     60\u001b[0m                 self._subplotspec = GridSpec(\n\u001b[0;32m     61\u001b[0m                         rows, cols, figure=self.figure)[int(num) - 1]\n",
      "\u001b[1;31mValueError\u001b[0m: num must be 1 <= num <= 18, not 19"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 18 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def draw_histograms(dataframe, features, rows, cols):\n",
    "    fig=plt.figure(figsize=(20,20))\n",
    "    for i, feature in enumerate(features):\n",
    "        ax=fig.add_subplot(rows,cols,i+1)\n",
    "        dataframe[feature].hist(bins=20,ax=ax,facecolor='midnightblue')\n",
    "        ax.set_title(feature+\" Distribution\",color='DarkRed')\n",
    "        \n",
    "    fig.tight_layout()  \n",
    "    plt.show()\n",
    "draw_histograms(heart,heart.columns,6,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    34706\n",
       "1    33900\n",
       "Name: cardio, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart.cardio.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ffcb0a9a58>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn.countplot(x='cardio',data=heart)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 34,706 patents with no heart disease and 33,900 patients with risk of heart disease."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1ffcb2ac630>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sn.pairplot(data=heart)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "heart.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LOGISTIC REGRESSION\n",
    "Logistic regression is a type of regression analysis in statistics used for prediction of outcome of a categorical dependent variable from a set of predictor or independent variables. In logistic regression the dependent variable is always binary. Logistic regression is mainly used to for prediction and also calculating the probability of success."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up train and test\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up classifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "classifier = LogisticRegression()\n",
    "classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit and Compare\n",
    "classifier.fit(X_train, y_train)\n",
    "print(f\"Training Data Score: {classifier.score(X_train, y_train)}\")\n",
    "print(f\"Testing Data Score: {classifier.score(X_test, y_test)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make Predictions\n",
    "predictions = classifier.predict(X_test)\n",
    "print(f\"First 10 Predictions:   {predictions[:10]}\")\n",
    "print(f\"First 10 Actual labels: {y_test[:10].tolist()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display Predictions\n",
    "pd.DataFrame({\"Prediction\": predictions, \"Actual\": y_test}).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate classification report\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test, predictions,\n",
    "                            target_names=[\"negative\", \"positive\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cm=confusion_matrix(y_test,predictions)\n",
    "conf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n",
    "plt.figure(figsize = (8,5))\n",
    "sn.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The confusion matrix shows 6741+5673 = 12,414 correct predictions and 2802+1936= 4738 incorrect ones.\n",
    "\n",
    "True Positives: 5673\n",
    "\n",
    "True Negatives: 6741\n",
    "\n",
    "False Positives: 1936 (Type I error)\n",
    "\n",
    "False Negatives: 2802 ( Type II error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TN=cm[0,0]\n",
    "TP=cm[1,1]\n",
    "FN=cm[1,0]\n",
    "FP=cm[0,1]\n",
    "sensitivity=TP/float(TP+FN)\n",
    "specificity=TN/float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The acuuracy of the model = TP+TN/(TP+TN+FP+FN) = ',(TP+TN)/float(TP+TN+FP+FN),'\\n',\n",
    "\n",
    "'The Missclassification = 1-Accuracy = ',1-((TP+TN)/float(TP+TN+FP+FN)),'\\n',\n",
    "\n",
    "'Sensitivity or True Positive Rate = TP/(TP+FN) = ',TP/float(TP+FN),'\\n',\n",
    "\n",
    "'Specificity or True Negative Rate = TN/(TN+FP) = ',TN/float(TN+FP),'\\n',\n",
    "\n",
    "'Positive Predictive value = TP/(TP+FP) = ',TP/float(TP+FP),'\\n',\n",
    "\n",
    "'Negative predictive Value = TN/(TN+FN) = ',TN/float(TN+FN),'\\n',\n",
    "\n",
    "'Positive Likelihood Ratio = Sensitivity/(1-Specificity) = ',sensitivity/(1-specificity),'\\n',\n",
    "\n",
    "'Negative likelihood Ratio = (1-Sensitivity)/Specificity = ',(1-sensitivity)/specificity)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above statistics it is clear that the model is highly sensitive than specific. The positive values are predicted more accurately than the negative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg=LogisticRegression()\n",
    "logreg.fit(X_train,y_train)\n",
    "y_pred=logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Predicted probabilities of 0 (No Heart Attack) and 1 ( Heart Attack: Yes) for the test data with a default classification threshold of 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_prob=logreg.predict_proba(X_test)[:,:]\n",
    "y_pred_prob_df=pd.DataFrame(data=y_pred_prob, columns=['Prob of no Heart disease (0)','Prob of Heart Disease (1)'])\n",
    "y_pred_prob_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lower the Threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import binarize\n",
    "for i in range(1,5):\n",
    "    cm2=0\n",
    "    y_pred_prob_yes=logreg.predict_proba(X_test)\n",
    "    y_pred2=binarize(y_pred_prob_yes,i/10)[:,1]\n",
    "    cm2=confusion_matrix(y_test,y_pred2)\n",
    "    print ('With',i/10,'threshold the Confusion Matrix is ','\\n',cm2,'\\n',\n",
    "            'with',cm2[0,0]+cm2[1,1],'correct predictions and',cm2[1,0],'Type II errors( False Negatives)','\\n\\n',\n",
    "          'Sensitivity: ',cm2[1,1]/(float(cm2[1,1]+cm2[1,0])),'Specificity: ',cm2[0,0]/(float(cm2[0,0]+cm2[0,1])),'\\n\\n\\n')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ROC CURVE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_yes[:,1])\n",
    "plt.plot(fpr,tpr)\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.0])\n",
    "plt.title('ROC curve for Heart disease classifier')\n",
    "plt.xlabel('False positive rate (1-Specificity)')\n",
    "plt.ylabel('True positive rate (Sensitivity)')\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A common way to visualize the trade-offs of different thresholds is by using an ROC curve, a plot of the true positive rate (# true positives/ total # positives) versus the false positive rate (# false positives / total # negatives) for all possible choices of thresholds. A model with good classification accuracy should have significantly more true positives than false positives at all thresholds.\n",
    "\n",
    "The optimum position for roc curve is towards the top left corner where the specificity and sensitivity are at optimum levels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Area Under The Curve (AUC)\n",
    "The area under the ROC curve quantifies model classification accuracy; the higher the area, the greater the disparity between true and false positives, and the stronger the model in classifying members of the training dataset. An area of 0.5 corresponds to a model that performs no better than random classification and a good classifier stays as far away from that as possible. An area of 1 is ideal. The closer the AUC to 1 the better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "score = roc_auc_score(y_test,y_pred_prob_yes[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GridSearch for Logisitic Regression\n",
    "params_lr = {'penalty': ['l1', 'l2'],\n",
    "             'C':[0.001,.009,0.01,.09,1,5,10,25]}\n",
    "\n",
    "grid_lr = GridSearchCV(logreg, param_grid = params_lr, n_jobs=-1)\n",
    "grid_lr.fit(X_train, y_train)\n",
    "print(\"Best Hyper Parameters:\\n\", grid_lr.best_params_)\n",
    "prediction_lr = grid_lr.predict(X_test)\n",
    "\n",
    "# Print Accuracy\n",
    "accuracy_lr = metrics.accuracy_score(prediction_lr, y_test)\n",
    "print(\"Accuracy: \", accuracy_lr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
